//
// GSRfileWriter.m
//
// Copyright (c) 2012 Gil Shapira
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#import "GSRfileWriter.h"
#import "NSString+Rfile.h"


#define FMT(...)            [NSString stringWithFormat:__VA_ARGS__]

#define ADDTO(array, ...)   [(array) addObject:FMT(__VA_ARGS__)]

#define ADD(...)            ADDTO((lines), __VA_ARGS__)

#define kDefinePadding      50
#define kMacroPadding       30


@implementation GSRfileWriter {
    NSMutableDictionary *_types;
}


- (id)init {
    if (self = [super init]) {
        _types = [NSMutableDictionary dictionary];
    }
    return self;
}

- (void)addResource:(NSString *)resource key:(NSString *)key type:(NSString *)type {
    NSMutableDictionary *resources = _types[type];
    if (!resources) {
        _types[type] = resources = [NSMutableDictionary dictionary];
    }
    resources[key] = resource;
}

- (void)writeToTarget:(NSString *)target {
    NSArray *types = [[_types allKeys] sortedArrayUsingSelector:@selector(caseInsensitiveCompare:)];

    NSMutableArray *lines = [NSMutableArray array];

    ADD(@"//");
    ADD(@"// Generated by:");
    ADD(@"//");
    ADD(@"// %@",self.cmdLine);
    ADD(@"//");
    ADD(@"");
    ADD(@"");
    ADD(@"/////////////////////////////////////////////////////////////////////");
    ADD(@"// Macros");
    ADD(@"//");
    ADD(@"");

    [self appendMacrosWithTypes:types toLines:lines];

    ADD(@"");
    ADD(@"");
    ADD(@"/////////////////////////////////////////////////////////////////////");
    ADD(@"// Resource Keys");
    ADD(@"//");
    ADD(@"");

    for (NSString *type in types) {
        printf("'%s':\n", [type UTF8String]);
        [self appendDefinesForType:type toLines:lines];
        ADD(@"");
    }

    ADD(@"");
    ADD(@"/////////////////////////////////////////////////////////////////////");
    ADD(@"// Code Completion");
    ADD(@"//");
    ADD(@"");

    for (NSString *type in types) {
        [self appendStructForType:type toLines:lines];
        ADD(@"");
    }

    [self appendResourcesStructWithTypes:types toLines:lines];

    ADD(@"");

    [self writeFileLines:lines toFileAtPath:[target stringByAppendingPathExtension:@"h"]];
}

- (void)appendDefinesForType:(NSString *)type toLines:(NSMutableArray *)lines {
    NSString *name = [type stringByConvertingToCIdentifier];
    NSDictionary *resources = _types[type];

    NSArray *keys = [resources.allKeys sortedArrayUsingSelector:@selector(caseInsensitiveCompare:)];
    for (NSString *resourceKey in keys) {
        NSString *resourceName = [resourceKey stringByConvertingToCIdentifier];
        NSString *resourceValue = resources[resourceKey];
        NSString *defineName = FMT(@"_%@Res%@%@",self.prefix,name,resourceName);

        printf("    '%s' => '%s'\n", [resourceName UTF8String], [resourceValue UTF8String]);

        ADD(@"#define %@ @\"%@\"",[defineName stringByPaddingToMinimumLength:kDefinePadding],resourceValue);
    }
}

- (void)appendStructForType:(NSString *)type toLines:(NSMutableArray *)lines {
    NSString *name = [type stringByConvertingToCIdentifier];
    NSDictionary *resources = _types[type];
    NSString *structName = FMT(@"_%@%@Resources",self.prefix,name);

    ADD(@"typedef struct %@ {",structName);

    NSArray *keys = [resources.allKeys sortedArrayUsingSelector:@selector(caseInsensitiveCompare:)];
    for (NSString *resourceKey in keys) {
        NSString *resourceName = [resourceKey stringByConvertingToCIdentifier];
        ADD(@"    void *%@;",resourceName);
    }

    ADD(@"} %@;",structName);
}

- (void)appendResourcesStructWithTypes:(NSArray *)types toLines:(NSMutableArray *)lines {
    ADD(@"typedef struct _%@Resources {",self.prefix);

    NSString *additionsDefine = FMT(@"%@RESOURCE_ADDITIONS",[self.prefix uppercaseString]);
    ADD(@"    #ifdef %@",additionsDefine);
    ADD(@"    %@",additionsDefine);
    ADD(@"    #endif");

    for (NSString *type in types) {
        NSString *name = [type stringByConvertingToCIdentifier];
        ADD(@"    _%@%@Resources %@;",self.prefix,name,name);
    }

    ADD(@"} _%@Resources;",self.prefix);
}

- (void)appendMacrosWithTypes:(NSArray *)types toLines:(NSMutableArray *)lines {
    if (_types[@"str"]) {
        NSString *defineFunc = FMT(@"%@String(NAME)",self.prefix);
        ADD(@"#define %@ NSLocalizedString(%@ResourceStr(NAME), nil)",[defineFunc stringByPaddingToMinimumLength:kMacroPadding],self.prefix);

        defineFunc = FMT(@"%@FormatString(NAME, ...)",self.prefix);
        ADD(@"#define %@ [NSString stringWithFormat:%@String(NAME),##__VA_ARGS__]",[defineFunc stringByPaddingToMinimumLength:kMacroPadding],self.prefix);

        ADD(@"");
    }

    if (_types[@"img"]) {
        NSString *defineFunc = FMT(@"%@Image(NAME)",self.prefix);
        ADD(@"#define %@ [UIImage imageNamed:%@ResourceImg(NAME)]",[defineFunc stringByPaddingToMinimumLength:kMacroPadding],self.prefix);

        ADD(@"");
    }

    for (NSString *type in _types) {
        NSString *name = [type stringByConvertingToCIdentifier];
        NSString *defineFunc = FMT(@"%@Resource%@(NAME)",self.prefix,name);
        ADD(@"#define %@ %@Resource(%@, NAME)",[defineFunc stringByPaddingToMinimumLength:kMacroPadding],self.prefix,name);
    }

    ADD(@"");
    
    ADD(@"#define %@Resource(TYPE, NAME)         \\",self.prefix);
    ADD(@"    (((void)(NO && ((void)((_%@Resources *) NULL)->TYPE.NAME, NO)), \\",self.prefix);
    ADD(@"    _%@Res##TYPE##NAME))",self.prefix);
}

- (void)writeFileLines:(NSArray *)lines toFileAtPath:(NSString *)path {
    printf("Writing file: %s\n",[path UTF8String]);

    NSString *output = [lines componentsJoinedByString:@"\n"];

    __autoreleasing NSError *error = nil;
    [output writeToFile:path atomically:NO encoding:NSUTF8StringEncoding error:&error];
    if (error) {
        fprintf(stderr, "Couldn't write file %s: %s\n", [path UTF8String], [error.description UTF8String]);
    }
}

@end
