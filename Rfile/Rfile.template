//
// Generated by:
//
// {{cmdline}}
//


////////////////////////////////////////////////////////////////////////////////
#pragma mark - Convenience macros
////////////////////////////////////////////////////////////////////////////////
//
// These macros return the requested resource directly.
//
// For example, say we have a UITableView showing a list of countries. We've got
// retina and non-retina images for each country's flag (e.g., "FlagSweden.png"
// and "FlagSweden@2x.png") and we've got localized names for each country as
// entries (e.g., "country_name_sweden") in the Localizable.strings files.
//
// In this case, to set a country table cell we might do something like this:
//
//     cell.textLabel.text = {{p}}String(CountryNameSweden);
{{#fonts}}//     cell.textLabel.font = {{p}}Font(BaskervilleBold, 20.0f);
{{/fonts}}//     cell.imageView.image = {{p}}Image(FlagSweden};
//

#define {{p}}String(NAME)                 NSLocalizedString({{p}}StringKey(NAME), nil)

#define {{p}}FormatString(NAME, ...)      [NSString stringWithFormat:{{p}}String(NAME),##__VA_ARGS__]

#define {{p}}Image(NAME)                  [UIImage imageNamed:{{p}}ImageFile(NAME)]
{{#fonts}}
#define {{p}}Font(NAME, SIZE)             [UIFont fontWithName:{{p}}FontName(NAME) size:(SIZE)]
{{/fonts}}


////////////////////////////////////////////////////////////////////////////////
#pragma mark - Utility macros
////////////////////////////////////////////////////////////////////////////////
//
// These macros return the resource's key rather than the resource itself. They
// can be used when the resource needs to be accessed using other APIs than
// those used in the convenience macros above.
//

//
// Returns the key for a localized string. The key is the same one used in the
// Localizable.strings file, e.g., "country_name_sweden" in the example above.
//
#define {{p}}StringKey(NAME)              _{{p}}ResourceKey(String, NAME)

//
// Returns the filename of a resource image. This can be used when images need
// to be accessed directly or if [UIImage imageNamed:] isn't suitable. For
// example, to create an image using [UIImage imageWithContentsOfFile:] we can
// do something like this:
//
//     image = [UIImage imageWithContentsOfFile:{{p}}ImageFile(FlagSweden)];
//
#define {{p}}ImageFile(NAME)              _{{p}}ResourceKey(Image, NAME)
{{#fonts}}
//
// Returns the name of a resource or platform font.
//
#define {{p}}FontName(NAME)               _{{p}}ResourceKey(Font, NAME)
{{/fonts}}


////////////////////////////////////////////////////////////////////////////////
#pragma mark - Internal
////////////////////////////////////////////////////////////////////////////////
//
// Internal defines and helpers used by the above macros. These should be
// considered implementation details and aren't meant to be used directly.
//


//
// Low level macro that translates resource types and names into one of the
// constants #defined below.
//
// The first line fools Xcode into thinking it's accessing an instance of one
// of the helper structs thus enabling code completion. During compilation this
// code is stripped out by compiler optimizations, so in practice using this
// macro results in the same disassembly as using the string literals directly.
//
#define _{{p}}ResourceKey(TYPE, NAME)     \
    ((void)(NO && ((void)((_{{p}}Resources *) NULL)->TYPE.NAME, NO)), \
    _{{p}}##TYPE##NAME)


//
// Resource keys
//
{{#types}}
{{#resources}}#define _{{p}}{{define}} @"{{resource}}"
{{/resources}}{{/types}}

//
// Helper structs
//
{{#types}}
typedef struct {
{{#resources}}    int {{helper}};
{{/resources}}} _{{p}}{{type}}s;
{{/types}}
typedef struct {
{{#types}}    _{{p}}{{type}}s {{type}};
{{/types}}} _{{p}}Resources;
